---
import json from '../components/Data/Opinions.json';
---

<section class="mt-5">
    <div class="flex animate-opinions-slide lazy">
        {
            json.map(({ name, opinion, Rate }) => (
                <div class="bg-white rounded-lg shadow-md p-4 min-w-[300px] mx-2">
                    <h2 class="text-2xl font-bold">{name}</h2>
                    <p>{opinion}</p>
                    <div class="flex">
                        {
                            Array.from({ length: Rate }).map((_, index) => (
                                <svg class="w-6 h-6 text-yellow-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.286 3.97a1 1 0 00.95.69h4.18c.969 0 1.371 1.24.588 1.81l-3.392 2.46a1 1 0 00-.364 1.118l1.286 3.97c.3.921-.755 1.688-1.54 1.118l-3.392-2.46a1 1 0 00-1.176 0l-3.392 2.46c-.784.57-1.84-.197-1.54-1.118l1.286-3.97a1 1 0 00-.364-1.118L2.34 9.397c-.783-.57-.38-1.81.588-1.81h4.18a1 1 0 00.95-.69l1.286-3.97z" />
                                </svg>
                            ))
                        }
                    </div>
                </div>
            ))
        }
    </div>
</section>

<style>
@keyframes opinions-slide {
    0% { transform: translateX(0); }
    100% { transform: translateX(calc(-300px * 3)); } /* Ajusta el n√∫mero de elementos visibles */
}

.animate-opinions-slide {
    animation: opinions-slide 40s linear infinite;
}

.lazy {
    opacity: 0;
    transition: opacity 1.0s;
}

.lazy-loaded {
    opacity: 1;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function () {
    const lazyElements = document.querySelectorAll('.lazy');

    if ('IntersectionObserver' in window) {
        const lazyObserver = new IntersectionObserver((entries, observer) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('lazy-loaded');
                    lazyObserver.unobserve(entry.target);
                }
            });
        });

        lazyElements.forEach(element => {
            lazyObserver.observe(element);
        });
    } else {
        // Fallback for browsers that do not support IntersectionObserver
        lazyElements.forEach(element => {
            element.classList.add('lazy-loaded');
        });
    }
});
</script>